.PHONY: clean coverage help \
	quality requirements selfcheck syncdb load test test-all upgrade validate pylintrc validate_cover

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

upgrade: ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	pip install -q pip-tools
	pip-compile --upgrade -o requirements/dev.txt requirements/base.in requirements/dev.in requirements/quality.in
	pip-compile --upgrade -o requirements/quality.txt requirements/quality.in
	pip-compile --upgrade -o requirements/test.txt requirements/base.in requirements/test.in
	pip-compile --upgrade -o requirements/travis.txt requirements/travis.in
	# Let tox control the Django and elasticsearch-dsl version for tests
	sed '/django==/d' requirements/test.txt | sed '/elasticsearch-dsl==/d' | sed '/elasticsearch==/d' > requirements/test.tmp
	mv requirements/test.tmp requirements/test.txt

quality: ## check coding style with pycodestyle and pylint
	tox -e quality

requirements: ## install development environment requirements
	pip install -qr requirements/dev.txt --exists-action w
	pip-sync requirements/dev.txt requirements/test.txt

coverage: clean ## check code coverage quickly with the default Python
	coverage run ./manage.py test
	coverage report -m
	coverage html
	$(BROWSER) htmlcov/index.html

syncdb: clean ## setup local sqlite db
	./manage.py migrate --run-syncdb

load: syncdb ## load fixtures into sqlite
	./manage.py loaddata tests/tests_initial.json

test: syncdb ## run tests in the current virtualenv
	./manage.py test

diff_cover: test
	diff-cover coverage.xml

test-all: ## run tests on every supported Python/Django combination
	tox

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."

pylintrc: ## check that the Makefile is well-formed
	edx_lint write pylintrc

nuke:
	@echo "Removing containers, networks, and data... ðŸ§¨"
	@echo
	docker compose down -v

es-health-local-api:
	@echo "Assuming you've got docker up, getting health of elasticsearch... ðŸ“„"
	@echo
	curl 'localhost:9200/_cat/health?format=json&pretty=true'

es-list-indexes-local-api:
	@echo "Assuming you've got docker up, getting elasticsearch indexes via API call... ðŸ“„"
	curl 'localhost:9200/_cat/indices?format=json&pretty=true'

es-print-java-env:
	@echo "printing runtime value of ES_JAVA_OPTS"
	docker-compose run --rm elastic printenv ES_JAVA_OPTS

up:
	@echo "Bringing up elastic 6 in docker ðŸš€"
	docker compose up -d --remove-orphans

down:
	@echo "Destroying local containers, but keeping data volumes intact... ðŸ˜´"
	docker compose down



validate_cover:
	curl --data-binary @codecov.yml https://codecov.io/validate
